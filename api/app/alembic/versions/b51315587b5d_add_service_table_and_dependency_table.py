from uuid import uuid4

import sqlalchemy as sa
from alembic import op

"""add service table and dependency table

Revision ID: b51315587b5d
Revises: 47fd451d5c21
Create Date: 2024-04-11 05:14:52.954202

"""

# revision identifiers, used by Alembic.
revision = 'b51315587b5d'
down_revision = '47fd451d5c21'
branch_labels = None
depends_on = None


def _convert_references_to_services_and_dependencies(
    service_table: sa.sql.schema.Table,
    dependency_table: sa.sql.schema.Table,
) -> None:
    connection = op.get_bind()
    services: dict[tuple[str, str], str] = {}  # {(pteam_id, service_name): service_id}
    dependencies: set[tuple[str, str, str, str]] = set()  # {(service_id, tag_id, version, target)}
    for ptr in connection.exec_driver_sql(
        'SELECT pteam_id, tag_id, "group", target, version FROM pteamtagreference'
    ).all():
        service_key = (ptr.pteam_id, ptr.group)
        service_id = services.get(service_key, str(uuid4()))
        services[service_key] = service_id
        dependencies.add((service_id, ptr.tag_id, ptr.version, ptr.target))

    op.bulk_insert(
        service_table,
        [
            {
                "service_id": service_id,
                "pteam_id": pteam_id,
                "service_name": group,
            }
            for [pteam_id, group], service_id in services.items()
        ],
    )
    op.bulk_insert(
        dependency_table,
        [
            {
                "service_id": service_id,
                "tag_id": tag_id,
                "version": version,
                "target": target,
            }
            for [service_id, tag_id, version, target] in dependencies
        ],
    )


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    service_table = op.create_table('service',
    sa.Column('service_id', sa.String(length=36), nullable=False),
    sa.Column('pteam_id', sa.String(length=36), nullable=False),
    sa.Column('service_name', sa.String(length=255), nullable=False),
    sa.ForeignKeyConstraint(['pteam_id'], ['pteam.pteam_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('service_id'),
    sa.UniqueConstraint("pteam_id", "service_name", name="service_pteam_id_service_name_key")
    )
    op.create_index(op.f('ix_service_pteam_id'), 'service', ['pteam_id'], unique=False)
    dependency_table = op.create_table('dependency',
    sa.Column('service_id', sa.String(length=36), nullable=False),
    sa.Column('tag_id', sa.String(length=36), nullable=False),
    sa.Column('version', sa.Text(), nullable=False),
    sa.Column('target', sa.Text(), nullable=False),
    sa.ForeignKeyConstraint(['service_id'], ['service.service_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['tag_id'], ['tag.tag_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('service_id', 'tag_id', 'version', 'target')
    )
    op.create_index(op.f('ix_dependency_service_id'), 'dependency', ['service_id'], unique=False)
    op.create_index(op.f('ix_dependency_tag_id'), 'dependency', ['tag_id'], unique=False)

    _convert_references_to_services_and_dependencies(service_table, dependency_table)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_dependency_tag_id'), table_name='dependency')
    op.drop_index(op.f('ix_dependency_service_id'), table_name='dependency')
    op.drop_table('dependency')
    op.drop_index(op.f('ix_service_pteam_id'), table_name='service')
    op.drop_table('service')
    # ### end Alembic commands ###
